
[python]
# Python codebase
REQUIREMENTS_FILES = [
  "requirements.txt"
]
tools = ['semgrep', 'trufflehog', 'python-bandit', 'python-piprot', 'python-safety', 'python-cyclonedx']
    [python.semgrep]
    REPORT_FILE = "reports/semgrep-python-report.json"
    PRINT_TIMING_INFO = true
    CONFIGS = [
        "p/ci",
        "p/python",
    ]
    EXCLUDE = [
        "tests"
    ]
    [python.trufflehog]
    REPORT_FILE = "reports/truffleHog-python-report.json"
    SOURCE = "."
    IGNORED_FILES = [
        "node_modules/",
        "target/",
        "build/",
        "dist/",
        ".gradle",
        ".aws",
        ".idea",
        ".pytest_cache"
    ]
    
    [python.python-bandit]
    REPORT_FILE = "reports/bandit-python-report.json"
    IGNORE_BELOW_SEVERITY = "medium"
    SOURCE = "."
    
    [python.python-piprot]
    REPORT_FILE = "reports/piprot-python-report.json"
    NEWER_MAJOR_SEMVERSION_SEVERITY = "medium"
    NEWER_MINOR_SEMVERSION_SEVERITY = "none"
    NEWER_PATCH_SEMVERSION_SEVERITY = "none"
    IGNORE_BELOW_SEVERITY = "low"
    
    [python.python-safety]
    # By default it uses the open Python vulnerability database Safety DB, 
    # but can be upgraded to use pyup.io's Safety API using the APIKEY option
    # see https://github.com/pyupio/safety/blob/master/docs/api_key.md
    REPORT_FILE = "reports/safety-python-report.json"
    
    [python.python-cyclonedx]
    REPORT_FILE = "reports/cyclonedx-python-bom.json"
    REQUIREMENTS_FILE = "requirements.txt"


========

Safety and Piprot work best when running against pip frozen requirements