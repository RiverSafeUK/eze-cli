short_description:
======================
opensource multi language and container bill of materials (SBOM) generation utility

config_help:
======================
[anchore-syft]
# SOURCE str [OPTIONAL]
# By default it is "." aka local folder
# From syft help
#  Supports the following image sources:
#     syft packages yourrepo/yourimage:tag     defaults to using images from a Docker daemon. If Docker is not present, the image is pulled directly from the registry.
#     syft packages path/to/a/file/or/dir      a Docker tar, OCI tar, OCI directory, or generic filesystem directory
# 
#   You can also explicitly specify the scheme to use:
#     syft packages docker:yourrepo/yourimage:tag          explicitly use the Docker daemon
#     syft packages docker-archive:path/to/yourimage.tar   use a tarball from disk for archives created from "docker save"
#     syft packages oci-archive:path/to/yourimage.tar      use a tarball from disk for OCI archives (from Skopeo or otherwise)
#     syft packages oci-dir:path/to/yourimage              read directly from a path on disk for OCI layout directories (from Skopeo or otherwise)
#     syft packages dir:path/to/yourproject                read directly from a path on disk (any directory)
#     syft packages registry:yourrepo/yourimage:tag        pull image directly from a registry (no container runtime required)
# default value: 
#   SOURCE = "."
# 
SOURCE = "python:3.8-slim"

# CONFIG_FILE str [OPTIONAL]
# Syft config file location, by default Empty, maps to syft argument
# -c, --config string     application config file
# 
CONFIG_FILE = "..."


# REPORT_FILE str [OPTIONAL]
# output converted json sbom location (will default to tmp file otherwise)
# default value: 
#   REPORT_FILE = "<tempdir>/.eze-temp/tmp-syft-bom.json"
# 
REPORT_FILE = "..."


# INTERMEDIATE_FILE str [OPTIONAL]
# file used to store xml cyclonedx from syft before conversion into final json format
# (will default to tmp file otherwise)
# default value: 
#   INTERMEDIATE_FILE = "<tempdir>/.eze-temp/tmp-syft-bom.xml"
# 
INTERMEDIATE_FILE = "..."


# LICENSE_CHECK str [OPTIONAL]
# available modes:
# - PROPRIETARY : for commercial projects, check for non-commercial, strong-copyleft, and source-available licenses
# - PERMISSIVE : for permissive open source projects (aka MIT, LGPL), check for strong-copyleft licenses
# - OPENSOURCE : for copyleft open source projects (aka GPL), check for non-OSI or FsfLibre certified licenses
# - OFF : no license checks
# All modes will also warn on "unprofessional", "deprecated", and "permissive with conditions" licenses
# default value: 
#   LICENSE_CHECK = "PROPRIETARY"
# 
LICENSE_CHECK = "PROPRIETARY"

# LICENSE_ALLOWLIST list [OPTIONAL]
# list of licenses to exempt from license checks
# 
LICENSE_ALLOWLIST = ["MIT-enna"]

# LICENSE_DENYLIST list [OPTIONAL]
# list of licenses to always report usage as a error
# 
LICENSE_DENYLIST = ["MIT-enna"]


# Common Tool Config

# ADDITIONAL_ARGUMENTS str [OPTIONAL]
# common field that can be used to postfix arbitrary arguments onto any plugin cli tooling
# 
ADDITIONAL_ARGUMENTS = "..."


# IGNORE_BELOW_SEVERITY str [OPTIONAL]
# vulnerabilities severities to ignore, by CVE severity level
# aka if set to medium, would ignore medium/low/none/na
# available levels: critical, high, medium, low, none, na
# 
IGNORE_BELOW_SEVERITY = "..."


# IGNORED_VULNERABILITIES list [OPTIONAL]
# vulnerabilities to ignore, by CVE code or by name
# feature only for use when vulnerability mitigated or on track to be fixed
# 
IGNORED_VULNERABILITIES = ["..."]


# IGNORED_FILES list [OPTIONAL]
# vulnerabilities in files or prefix folders to ignore
# feature only for use when vulnerability mitigated or on track to be fixed
# 
IGNORED_FILES = ["..."]


# DEFAULT_SEVERITY str [OPTIONAL]
# Severity to set vulnerabilities, when tool doesn't provide a severity, defaults to na
# available levels: critical, high, medium, low, none, na
# 
DEFAULT_SEVERITY = "..."


# EXCLUDE list [OPTIONAL]
# files or prefix folders to exclude in the scanning process
# 
EXCLUDE = ["..."]




install_help:
======================
In most cases all that is two things
        
Syft required to installed via apt-get or docker
As of writing, no native windows 10 syft exists, can be run via wsl2

Also cyclonedx-cli tool for converting xml output into json
https://github.com/CycloneDX/cyclonedx-cli/releases


more_info:
======================
https://github.com/anchore/syft
https://github.com/CycloneDX/cyclonedx-cli
https://owasp.org/www-project-cyclonedx/
https://cyclonedx.org/

This plugin uses syft to create a xml cyclonedx sbom
Then cyclone-cli to convert that isn't json cyclonedx sbom

Tips
===========================
- if scan running slow, try command locally to see what can be done to optimise the CONFIG_FILE
  (you can see command with --debug)

