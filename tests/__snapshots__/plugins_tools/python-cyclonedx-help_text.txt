short_description:
======================
opensource python bill of materials (SBOM) generation utility, also runs SCA via pypi

config_help:
======================
[python-cyclonedx]
# REQUIREMENTS_FILES list [OPTIONAL]
# surplus custom requirements.txt file
# any requirements files named requirements.txt will be automatically collected (or requirements-dev.txt with INCLUDE_DEV=true flag)
# gotcha: make sure it's a frozen version of the pip requirements
# 
REQUIREMENTS_FILES = "[custom-requirements.txt]"

# REPORT_FILE str [OPTIONAL]
# output report location (will default to tmp file otherwise)
# default value: 
#   REPORT_FILE = "<tempdir>/.eze-temp/tmp-python-cyclonedx-bom.json"
# 
REPORT_FILE = "..."


# INCLUDE_DEV bool [OPTIONAL]
# Exclude development dependencies from the BOM, aka requirements-dev.txt
# 
INCLUDE_DEV = true / false


# SCA_ENABLED bool [OPTIONAL]
# use pypi and nvd data feeds to Pypi detect vulnerabilities
# default value: 
#   SCA_ENABLED = true
# 
SCA_ENABLED = true / false


# LICENSE_CHECK str [OPTIONAL]
# available modes:
# - PROPRIETARY : for commercial projects, check for non-commercial, strong-copyleft, and source-available licenses
# - PERMISSIVE : for permissive open source projects (aka MIT, LGPL), check for strong-copyleft licenses
# - OPENSOURCE : for copyleft open source projects (aka GPL), check for non-OSI or FsfLibre certified licenses
# - OFF : no license checks
# All modes will also warn on "unprofessional", "deprecated", and "permissive with conditions" licenses
# default value: 
#   LICENSE_CHECK = "PROPRIETARY"
# 
LICENSE_CHECK = "PROPRIETARY"

# LICENSE_ALLOWLIST list [OPTIONAL]
# list of licenses to exempt from license checks
# 
LICENSE_ALLOWLIST = ["MIT-enna"]

# LICENSE_DENYLIST list [OPTIONAL]
# list of licenses to always report usage as a error
# 
LICENSE_DENYLIST = ["MIT-enna"]


# Common Tool Config

# ADDITIONAL_ARGUMENTS str [OPTIONAL]
# common field that can be used to postfix arbitrary arguments onto any plugin cli tooling
# 
ADDITIONAL_ARGUMENTS = "..."


# IGNORE_BELOW_SEVERITY str [OPTIONAL]
# vulnerabilities severities to ignore, by CVE severity level
# aka if set to medium, would ignore medium/low/none/na
# available levels: critical, high, medium, low, none, na
# 
IGNORE_BELOW_SEVERITY = "..."


# IGNORED_VULNERABILITIES list [OPTIONAL]
# vulnerabilities to ignore, by CVE code or by name
# feature only for use when vulnerability mitigated or on track to be fixed
# 
IGNORED_VULNERABILITIES = ["..."]


# IGNORED_FILES list [OPTIONAL]
# vulnerabilities in files or prefix folders to ignore
# feature only for use when vulnerability mitigated or on track to be fixed
# 
IGNORED_FILES = ["..."]


# DEFAULT_SEVERITY str [OPTIONAL]
# Severity to set vulnerabilities, when tool doesn't provide a severity, defaults to na
# available levels: critical, high, medium, low, none, na
# 
DEFAULT_SEVERITY = "..."


# EXCLUDE list [OPTIONAL]
# files or prefix folders to exclude in the scanning process
# 
EXCLUDE = ["..."]




install_help:
======================
In most cases all that is required is python and pip (version 3+), and cyclonedx installed via pip

pip install cyclonedx-bom

more_info:
======================
https://github.com/CycloneDX/cyclonedx-python
https://owasp.org/www-project-cyclonedx/
https://cyclonedx.org/

Will automatically run against any poetry, requirements.txt, and pipenv projects in the repo

Common Gotchas
===========================
requirements.txt Pip Freezing

A bill-of-material such as CycloneDX expects exact version numbers. Therefore requirements.txt must be frozen. 

This can be accomplished via:

$ pip freeze > requirements.txt

